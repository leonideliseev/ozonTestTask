package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"strconv"

	"github.com/leonideliseev/ozonTestTask/graph/model"
	smodel "github.com/leonideliseev/ozonTestTask/pkg/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	uid, err := strconv.ParseUint(input.UserID, 10, 32)
	if err != nil {
		return nil, err
	}

	newPost := smodel.CreatePost{
		Title:           input.Title,
		Content:         input.Content,
		UserId:          uint(uid),
		CommentsEnabled: input.CommentsEnabled,
	}

	post, err := r.storage.CreatePost(newPost)
	if err != nil {
		return nil, err
	}

	return post.ToGraphQL(), nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentInput) (*model.Comment, error) {
	uid, err := strconv.ParseUint(input.UserID, 10, 32)
	if err != nil {
		return nil, err
	}

	pid, err := strconv.ParseUint(input.PostID, 10, 32)
	if err != nil {
		return nil, err
	}

	var parid *uint
	if input.ParentCommentID != nil {
		parid64, err := strconv.ParseUint(*input.ParentCommentID, 10, 32)
		if err != nil {
			return nil, err
		}
		paridu := uint(parid64)
		parid = &paridu
	}

	// проверка на длину комментария
	text := []rune(input.Content)
	if len(text) > 2000 {
		return nil, fmt.Errorf("very long comment, simvol lenght = %d > 2000", len(text))
	}

	newComment := smodel.CreateComment{
		Content:  input.Content,
		UserId:   uint(uid),
		PostId:   uint(pid),
		ParentId: parid,
	}

	comm, err := r.storage.CreateComment(newComment)
	if err != nil {
		return nil, err
	}

	return comm.ToGraphQL(), nil
}

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string) (*model.User, error) {
	newUser := smodel.CreateUser{
		Username: username,
	}

	user, err := r.storage.CreateUser(newUser)
	if err != nil {
		return nil, err
	}

	return user.ToGraphQL(), err
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*model.Post, error) {
	dirtyPosts, err := r.storage.GetPosts()
	if err != nil {
		return nil, err
	}

	posts := make([]*model.Post, 0, len(dirtyPosts))
	for _, dirtyPost := range dirtyPosts {
		post := dirtyPost.ToGraphQL()
		posts = append(posts, post)
	}

	return posts, nil
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.Post, error) {
	pid, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	post, err := r.storage.GetPost(uint(pid))
	if err != nil {
		return nil, err
	}

	return post.ToGraphQL(), nil
}

// GetComments is the resolver for the getComments field.
func (r *queryResolver) GetComments(ctx context.Context, commID string) ([]*model.Comment, error) {
	cid, err := strconv.ParseUint(commID, 10, 32)
	if err != nil {
		return nil, err
	}

	dirtyComms, err := r.storage.GetComments(uint(cid))
	if err != nil {
		return nil, err
	}

	comms := make([]*model.Comment, 0)
	for _, dirtyComm := range dirtyComms {
		comm := dirtyComm.ToGraphQL()
		comms = append(comms, comm)
	}

	return comms, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
