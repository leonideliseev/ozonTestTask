type Post {
  id: ID!
  title: String!
  content: String!
  userId: ID!
  author: User!
  commentsEnabled: Boolean!
  commPage: CommPage!
}

type PostPage {
  posts: [Post!]!
  totalCount: Int!
}

type Comment {
  id: ID!
  postId: ID!
  userId: ID!
  author: User!
  content: String!
  parentCommentId: ID
  replyPage: CommPage!
}

type CommPage {
  comments: [Comment!]!
  totalCount: Int!
}

type User {
  id: ID!
  username: String!
}

input CreatePostInput {
  userId: ID!
  title: String!
  content: String!
  commentsEnabled: Boolean!
}

input CreateCommentInput {
  userId: ID!
  postId: ID!
  content: String!
  parentCommentId: ID
}

type Query {
  getPosts(limit: Int, offset: Int): PostPage!
  getPost(id: ID!, limit: Int, offset: Int): Post!
  getComments(commId: ID!, limit: Int, offset: Int): Comment!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  createComment(input: CreateCommentInput!): Comment!
  createUser(username: String!): User!
}

type Subscription {
  commentAdded(postId: ID!): Comment!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
